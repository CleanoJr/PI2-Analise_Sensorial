qtd_avaliadores = 60 # Número de avaliadores
qtd_amostras = 3 # Número de amostras
total_amostras = qtd_amostras * qtd_avaliadores # Total de amostras avaliadas
somas_amostras = [492, 454,	437] # Soma das notas de cada amostra
total_por_avaliador = [21, 25, 23, 27, 27, 26, 24, 24, 23, 24, 27, 14, 27, 25, 15, 21, 21, 22, 27, 27, 27, 27, 25, 18, 25, 25, 25, 21, 22, 18, 24, 25, 18, 27, 20, 26, 27, 26, 27, 25, 18, 27, 24, 24, 21, 24, 21, 19, 19, 24, 27, 27, 27, 17, 16, 25, 25, 17, 13, 20]
total_notas = sum(total_por_avaliador)
notas_individuais = [9,7,5,9,8,8,8,8,7,9,9,9,9,9,9,8,9,9,9,9,6,8,8,8,8,7,8,9,7,8,9,9,9,6,5,3,9,9,9,9,7,9,6,6,3,7,9,5,7,9,5,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,9,3,6,9,8,8,8,8,9,9,9,7,8,6,7,8,7,7,7,7,4,8,9,7,8,8,9,9,7,2,9,9,9,7,7,6,8,9,9,9,9,9,9,8,9,9,9,9,9,8,8,6,6,6,9,9,9,8,8,8,8,8,8,7,6,8,9,7,8,7,6,8,7,7,5,9,5,5,8,8,8,9,9,9,9,9,9,9,9,9,6,5,6,9,5,2,9,8,8,8,8,9,6,7,4,7,2,4,8,5,7]


def testes (qtd_amostras, qtd_avaliadores, total_notas, total_amostras, total_por_avaliador, notas_individuais):
    # Verifica se os parâmetros são válidos
    if (qtd_amostras <= 0 or qtd_avaliadores <= 0 or total_notas <= 0 or
        total_amostras <= 0 or not total_por_avaliador or not notas_individuais):
        return None
    
    # Calcula a média das notas dadas por avaliador
    media_avaliadores = total_notas / (qtd_avaliadores * qtd_amostras)

    # Calcula Anova
    anova = calc_anova(total_notas, total_amostras, qtd_amostras, qtd_avaliadores, total_por_avaliador, notas_individuais)

    if not anova:
        return 
    return None


# Função para calcular ANOVA
# Parâmetros:
# qtd_amostras: número de amostras
# qtd_avaliadores: número de avaliadores
# total_notas: soma total das notas dadas pelos avaliadores
# total_por_avaliador: lista com o total de notas dadas por cada avaliador
# notas_individuais: lista com as notas individuais dadas por cada avaliador
# Retorna uma string com os resultados do cálculo de ANOVA

def calc_anova(qtd_amostras, qtd_avaliadores, total_notas, total_por_avaliador, notas_individuais):
   
    # Fator de correção
    def fator_correcao():
        return (total_notas**2) / (qtd_amostras * qtd_avaliadores)

    #  Soma dos quadrados das Amostras
    def soma_quadrados_amostras(fator_correcao=fator_correcao()):
        sQa = 0
        for soma_amostra in somas_amostras:
            sQa += (soma_amostra**2)
        return (sQa  / qtd_avaliadores) - fator_correcao

    # Soma dos quadrados dos avaliadores
    def soma_quadrados_avaliadores(fator_correcao=fator_correcao()):
        sQav = 0
        for total_avaliador in total_por_avaliador:
            sQav += (total_avaliador**2)
        return (sQav / qtd_amostras) - fator_correcao
    
    # Soma dos quadrados Totais
    def soma_quadrados_totais(fator_correcao=fator_correcao()):
        sQt = 0
        for nota in notas_individuais:
            sQt += (nota**2)
        return sQt - fator_correcao
    
    # Soma dos quadrados do Resíduo
    def soma_quadrados_residuo():
        return (soma_quadrados_totais() - (soma_quadrados_amostras() + soma_quadrados_avaliadores()))

    return {
        "fator_correcao": round(fator_correcao(), 2),
        "soma_quadrados_amostras": round(soma_quadrados_amostras(), 2),
        "soma_quadrados_avaliadores": round(soma_quadrados_avaliadores(), 2),
        "soma_quadrados_totais": round(soma_quadrados_totais(), 2),
        "soma_quadrados_residuo": round(soma_quadrados_residuo(), 2)
    }


def calc_F_tabelado_5(quad_medio_residuo, quad_medio_variacao):
    
    # Verifica se os graus de liberdade são válidos
    if quad_medio_variacao <= 0 or quad_medio_residuo <= 0:
        return None
    
    #QM Residuo
    if quad_medio_residuo > 120:
        gl1 = 130
    elif quad_medio_residuo > 60:
        gl1 = 120
    elif quad_medio_residuo > 40:
        gl1 = 60
    elif quad_medio_residuo > 30:
        gl1 = 40
    else:
        gl1 = quad_medio_residuo

    # QM Variação
    if quad_medio_variacao > 24:
        gl2 = 25
    elif quad_medio_variacao > 12:
        gl2 = 24
    elif quad_medio_variacao > 8:
        gl2 = 12
    elif quad_medio_variacao > 6:
        gl2 = 8
    else:
        gl2 = quad_medio_variacao

    # Tabela F simplificada para fins de exemplo
    f_tabela = {
        (1, 1): 161.4,
        (1, 2): 199.5,
        (1, 3): 215.7,
        (1, 4): 224.6,
        (1, 5): 230.2,
        (1, 6): 234.0,
        (1, 8): 238.9,
        (1, 12): 243.9,
        (1, 24): 249.0,
        (1, 25): 254.3,
        (2, 1): 18.51,
        (2, 2): 19.0,
        (2, 3): 19.16,
        (2, 4): 19.25,
        (2, 5): 19.30,
        (2, 6): 19.33,
        (2, 8): 19.37,
        (2, 12): 19.41,
        (2, 24): 19.45,
        (2, 25): 19.50,
        (3, 1): 10.13,
        (3, 2): 9.55,
        (3, 3): 9.28,
        (3, 4): 9.12,
        (3, 5): 9.01,
        (3, 6): 8.94,
        (3, 8): 8.84,
        (3, 12): 8.74,
        (3, 24): 8.64,
        (3, 25): 8.53,
        (4, 1): 7.71,
        (4, 2): 6.94,
        (4, 3): 6.59,
        (4, 4): 6.39,
        (4, 5): 6.26,
        (4, 6): 6.16,
        (4, 8): 6.04,
        (4, 12): 5.91,
        (4, 24): 5.77,
        (4, 25): 5.63,
        (5, 1): 6.61,
        (5, 2): 5.79,
        (5, 3): 5.41,
        (5, 4): 5.19,
        (5, 5): 5.05,
        (5, 6): 4.95,
        (5, 8): 4.82,
        (5, 12): 4.68,
        (5, 24): 4.53,
        (5, 25): 4.36,
        (6, 1): 5.99,
        (6, 2): 5.14,
        (6, 3): 4.76,
        (6, 4): 4.53,
        (6, 5): 4.39,
        (6, 6): 4.28,
        (6, 8): 4.15,
        (6, 12): 4.00,
        (6, 24): 3.84,
        (6, 25): 3.67,
        (7, 1): 5.59,
        (7, 2): 4.74,
        (7, 3): 4.35,
        (7, 4): 4.12,
        (7, 5): 3.97,
        (7, 6): 3.87,
        (7, 8): 3.73,
        (7, 12): 3.57,
        (7, 24): 3.41,
        (7, 25): 3.23,
        (8, 1): 5.32,
        (8, 2): 4.46,
        (8, 3): 4.07,
        (8, 4): 3.84,
        (8, 5): 3.69,
        (8, 6): 3.58,
        (8, 8): 3.44,
        (8, 12): 3.28,
        (8, 24): 3.12,
        (8, 25): 2.93,
        (9, 1): 5.12,
        (9, 2): 4.26,
        (9, 3): 3.86,
        (9, 4): 3.63,
        (9, 5): 3.48,
        (9, 6): 3.37,
        (9, 8): 3.23,
        (9, 12): 3.07,
        (9, 24): 2.90,
        (9, 25): 2.71,
        (10, 1): 4.96,
        (10, 2): 4.10,
        (10, 3): 3.71,
        (10, 4): 3.48,
        (10, 5): 3.33,
        (10, 6): 3.22,
        (10, 8): 3.07,
        (10, 12): 2.91,
        (10, 24): 2.74,
        (10, 25): 2.54,
        (11, 1): 4.84,
        (11, 2): 3.98,
        (11, 3): 3.59,
        (11, 4): 3.36,
        (11, 5): 3.20,
        (11, 6): 3.09,
        (11, 8): 2.95,
        (11, 12): 2.79,
        (11, 24): 2.61,
        (11, 25): 2.40,
        (12, 1): 4.75,
        (12, 2): 3.88,
        (12, 3): 3.49,
        (12, 4): 3.26,
        (12, 5): 3.11,
        (12, 6): 3.00,
        (12, 8): 2.85,
        (12, 12): 2.69,
        (12, 24): 2.50,
        (12, 25): 2.30,
        (13, 1): 4.67,
        (13, 2): 3.80,
        (13, 3): 3.41,
        (13, 4): 3.18,
        (13, 5): 3.02,
        (13, 6): 2.92,
        (13, 8): 2.77,
        (13, 12): 2.60,
        (13, 24): 2.42,
        (13, 25): 2.21,
        (14, 1): 4.60,
        (14, 2): 3.74,
        (14, 3): 3.34,
        (14, 4): 3.11,
        (14, 5): 2.96,
        (14, 6): 2.85,
        (14, 8): 2.70,
        (14, 12): 2.53,
        (14, 24): 2.35,
        (14, 25): 2.13,
        (15, 1): 4.54,
        (15, 2): 3.68,
        (15, 3): 3.29,
        (15, 4): 3.06,
        (15, 5): 2.90,
        (15, 6): 2.79,
        (15, 8): 2.64,
        (15, 12): 2.48,
        (15, 24): 2.29,
        (15, 25): 2.07,
        (16, 1): 4.49,
        (16, 2): 3.63,
        (16, 3): 3.24,
        (16, 4): 3.01,
        (16, 5): 2.85,
        (16, 6): 2.74,
        (16, 8): 2.59,
        (16, 12): 2.42,
        (16, 24): 2.24,
        (16, 25): 2.01,
        (17, 1): 4.45,
        (17, 2): 3.59,
        (17, 3): 3.26,
        (17, 4): 2.96,
        (17, 5): 2.81,
        (17, 6): 2.70,
        (17, 8): 2.55,
        (17, 12): 2.38,
        (17, 24): 2.19,
        (17, 25): 1.96,
        (18, 1): 4.41,
        (18, 2): 3.55,
        (18, 3): 3.16,
        (18, 4): 2.93,
        (18, 5): 2.77,
        (18, 6): 2.66,
        (18, 8): 2.51,
        (18, 12): 2.34,
        (18, 24): 2.15,
        (18, 25): 1.92,
        (19, 1): 4.38,
        (19, 2): 3.52,
        (19, 3): 3.13,
        (19, 4): 2.90,
        (19, 5): 2.74,
        (19, 6): 2.63,
        (19, 8): 2.48,
        (19, 12): 2.31,
        (19, 24): 2.11,
        (19, 25): 1.88,
        (20, 1): 4.35,
        (20, 2): 3.49,
        (20, 3): 3.10,
        (20, 4): 2.87,
        (20, 5): 2.71,
        (20, 6): 2.60,
        (20, 8): 2.45,
        (20, 12): 2.28,
        (20, 24): 2.08,
        (20, 25): 1.84,
        (21, 1): 4.32,
        (21, 2): 3.47,
        (21, 3): 3.07,
        (21, 4): 2.84,
        (21, 5): 2.68,
        (21, 6): 2.57,
        (21, 8): 2.42,
        (21, 12): 2.25,
        (21, 24): 2.05,
        (21, 25): 1.81,
        (22, 1): 4.30,
        (22, 2): 3.44,
        (22, 3): 3.05,
        (22, 4): 2.82,
        (22, 5): 2.66,
        (22, 6): 2.55,
        (22, 8): 2.40,
        (22, 12): 2.23,
        (22, 24): 2.03,
        (22, 25): 1.78,
        (23, 1): 4.28,
        (23, 2): 3.42,
        (23, 3): 3.03,
        (23, 4): 2.80,
        (23, 5): 2.64,
        (23, 6): 2.53,
        (23, 8): 2.38,
        (23, 12): 2.20,
        (23, 24): 2.00,
        (23, 25): 1.76,
        (24, 1): 4.26,
        (24, 2): 3.40,
        (24, 3): 3.01,
        (24, 4): 2.78,
        (24, 5): 2.62,
        (24, 6): 2.51,
        (24, 8): 2.36,
        (24, 12): 2.18,
        (24, 24): 1.98,
        (24, 25): 1.73,
        (25, 1): 4.24,
        (25, 2): 3.38,
        (25, 3): 2.99,
        (25, 4): 2.76,
        (25, 5): 2.60,
        (25, 6): 2.49,
        (25, 8): 2.34,
        (25, 12): 2.16,
        (25, 24): 1.96,
        (25, 25): 1.71,
        (26, 1): 4.22,
        (26, 2): 3.37,
        (26, 3): 2.98,
        (26, 4): 2.74,
        (26, 5): 2.59,
        (26, 6): 2.47,
        (26, 8): 2.32,
        (26, 12): 2.15,
        (26, 24): 1.95,
        (26, 25): 1.69,
        (27, 1): 4.21,
        (27, 2): 3.35,
        (27, 3): 2.96,
        (27, 4): 2.73,
        (27, 5): 2.57,
        (27, 6): 2.46,
        (27, 8): 2.30,
        (27, 12): 2.13,
        (27, 24): 1.93,
        (27, 25): 1.67,
        (28, 1): 4.20,
        (28, 2): 3.34,
        (28, 3): 2.95,
        (28, 4): 2.71,
        (28, 5): 2.56,
        (28, 6): 2.44,
        (28, 8): 2.29,
        (28, 12): 2.12,
        (28, 24): 1.91,
        (28, 25): 1.65,
        (29, 1): 4.18,
        (29, 2): 3.33,
        (29, 3): 2.93,
        (29, 4): 2.70,
        (29, 5): 2.54,
        (29, 6): 2.43,
        (29, 8): 2.28,
        (29, 12): 2.10,
        (29, 24): 1.90,
        (29, 25): 1.64,
        (30, 1): 4.17,
        (30, 2): 3.32,
        (30, 3): 2.92,
        (30, 4): 2.69,
        (30, 5): 2.53,
        (30, 6): 2.42,
        (30, 8): 2.27,
        (30, 12): 2.09,
        (30, 24): 1.89,
        (30, 25): 1.62,
        (40, 1): 4.08,
        (40, 2): 3.23,
        (40, 3): 2.84,
        (40, 4): 2.61,
        (40, 5): 2.45,
        (40, 6): 2.34,
        (40, 8): 2.18,
        (40, 12): 2.00,
        (40, 24): 1.79,
        (40, 25): 1.51,
        (60, 1): 4.00,
        (60, 2): 3.15,
        (60, 3): 2.76,
        (60, 4): 2.52,
        (60, 5): 2.37,
        (60, 6): 2.25,
        (60, 8): 2.10,
        (60, 12): 1.92,
        (60, 24): 1.70,
        (60, 25): 1.39,
        (120, 1): 3.92,
        (120, 2): 3.07,
        (120, 3): 2.68,
        (120, 4): 2.45,
        (120, 5): 2.29,
        (120, 6): 2.17,
        (120, 8): 2.02,
        (120, 12): 1.83,
        (120, 24): 1.61,
        (120, 25): 1.25,
        (130, 1): 3.84,
        (130, 2): 2.99,
        (130, 3): 2.60,
        (130, 4): 2.37,
        (130, 5): 2.21,
        (130, 6): 2.10,
        (130, 8): 1.94,
        (130, 12): 1.75,
        (130, 24): 1.52,
        (130, 25): 1.00
    }
   
    return f_tabela.get((gl1, gl2), None)


def teste_dunnet():
    # Implementação do teste de Dunnett
    # Este é um exemplo simplificado e não inclui todos os detalhes do teste de Dunnett


    d_tabela = {
        (5, 2): 2.02,
        (5, 3): 2.44,
        (5, 4): 2.68,
        (5, 5): 2.85,
        (5, 6): 2.98,
        (5, 7): 3.08,
        (5, 8): 3.16,
        (5, 9): 3.24,
        (5, 10): 3.30,
        (6, 2): 1.97,
        (6, 3): 2.34,
        (6, 4): 2.56,
        (6, 5): 2.71,
        (6, 6): 2.83,
        (6, 7): 2.92,
        (6, 8): 3.00,
        (6, 9): 3.07,
        (6, 10): 3.12,
        (7, 2): 1.89,
        (7, 3): 2.27,
        (7, 4): 2.48,
        (7, 5): 2.62,
        (7, 6): 2.73,
        (7, 7): 2.82,
        (7, 8): 2.89,
        (7, 9): 2.95,
        (7, 10): 3.01,
        (8, 2): 1.86,
        (8, 3): 2.22,
        (8, 4): 2.42,
        (8, 5): 2.55,
        (8, 6): 2.66,
        (8, 7): 2.74,
        (8, 8): 2.81,
        (8, 9): 2.87,
        (8, 10): 2.92,
        (9, 2): 1.82,
        (9, 3): 2.18,
        (9, 4): 2.37,
        (9, 5): 2.50,
        (9, 6): 2.60,
        (9, 7): 2.68,
        (9, 8): 2.75,
        (9, 9): 2.81,
        (9, 10): 2.86,
        (10, 2): 1.81,
        (10, 3): 2.15,
        (10, 4): 2.34,
        (10, 5): 2.47,
        (10, 6): 2.56,
        (10, 7): 2.64,
        (10, 8): 2.70,
        (10, 9): 2.76,
        (10, 10): 2.81,
        (11, 2): 1.80,
        (11, 3): 2.13,
        (11, 4): 2.31,
        (11, 5): 2.44,
        (11, 6): 2.53,
        (11, 7): 2.60,
        (11, 8): 2.67,
        (11, 9): 2.72,
        (11, 10): 2.77,
        (12, 2): 1.78,
        (12, 3): 2.11,
        (12, 4): 2.29,
        (12, 5): 2.41,
        (12, 6): 2.50,
        (12, 7): 2.58,
        (12, 8): 2.64,
        (12, 9): 2.69,
        (12, 10): 2.74,
        (13, 2): 1.77,
        (13, 3): 2.09,
        (13, 4): 2.27,
        (13, 5): 2.39,
        (13, 6): 2.48,
        (13, 7): 2.55,
        (13, 8): 2.61,
        (13, 9): 2.66,
        (13, 10): 2.71,
        (14, 2): 1.76,
        (14, 3): 2.08,
        (14, 4): 2.55,
        (14, 5): 2.37,
        (14, 6): 2.46,
        (14, 7): 2.53,
        (14, 8): 2.59,
        (14, 9): 2.64,
        (14, 10): 2.69,
        (15, 2): 1.75,
        (15, 3): 2.07,
        (15, 4): 2.24,
        (15, 5): 2.36,
        (15, 6): 2.44,
        (15, 7): 2.51,
        (15, 8): 2.27,
        (15, 9): 2.62,
        (15, 10): 2.67,
        (16, 2): 1.75,
        (16, 3): 2.06,
        (16, 4): 2.23,
        (16, 5): 2.34,
        (16, 6): 2.43,
        (16, 7): 2.50,
        (16, 8): 2.56,
        (16, 9): 2.61,
        (16, 10): 2.65,
        (17, 2): 1.74,
        (17, 3): 2.05,
        (17, 4): 2.22,
        (17, 5): 2.33,
        (17, 6): 2.42,
        (17, 7): 2.49,
        (17, 8): 2.54,
        (17, 9): 2.59,
        (17, 10): 2.64,
        (18, 2): 1.73,
        (18, 3): 2.04,
        (18, 4): 2.21,
        (18, 5): 2.32,
        (18, 6): 2.41,
        (18, 7): 2.48,
        (18, 8): 2.53,
        (18, 9): 2.58,
        (18, 10): 2.62,
        (19, 2): 1.73,
        (19, 3): 2.03,
        (19, 4): 2.20,
        (19, 5): 2.31,
        (19, 6): 2.40,
        (19, 7): 2.47,
        (19, 8): 2.52,
        (19, 9): 2.57,
        (19, 10): 2.61,
        (20, 2): 1.72,
        (20, 3): 2.03,
        (20, 4): 2.19,
        (20, 5): 2.30,
        (20, 6): 2.39,
        (20, 7): 2.46,
        (20, 8): 2.51,
        (20, 9): 2.56,
        (20, 10): 2.60,
        (24, 2): 1.71,
        (24, 3): 2.01,
        (24, 4): 2.17,
        (24, 5): 2.28,
        (24, 6): 2.36,
        (24, 7): 2.43,
        (24, 8): 2.48,
        (24, 9): 2.53,
        (24, 10): 2.57,
        (30, 2): 1.70,
        (30, 3): 1.99,
        (30, 4): 2.15,
        (30, 5): 2.25,
        (30, 6): 2.33,
        (30, 7): 2.40,
        (30, 8): 2.45,
        (30, 9): 2.50,
        (30, 10): 2.54,
        (40, 2): 1.68,
        (40, 3): 1.97,
        (40, 4): 2.13,
        (40, 5): 2.23,
        (40, 6): 2.31,
        (40, 7): 2.37,
        (40, 8): 2.42,
        (40, 9): 2.47,
        (40, 10): 2.51,
        (60, 2): 1.67,
        (60, 3): 1.95,
        (60, 4): 2.10,
        (60, 5): 2.21,
        (60, 6): 2.28,
        (60, 7): 2.35,
        (60, 8): 2.39,
        (60, 9): 2.44,
        (60, 10): 2.48,
        (120, 2): 1.66,
        (120, 3): 1.93,
        (120, 4): 2.08,
        (120, 5): 2.18,
        (120, 6): 2.26,
        (120, 7): 2.32,
        (120, 8): 2.37,
        (120, 9): 2.41,
        (120, 10): 2.45,
        (130, 2): 1.64,
        (130, 3): 1.92,
        (130, 4): 2.06,
        (130, 5): 2.16,
        (130, 6): 2.23,
        (130, 7): 2.29,
        (130, 8): 2.34,
        (130, 9): 2.38,
        (130, 10): 2.42
    }
    
    return "Teste de Dunnett não implementado"


# print(calc_anova(total_notas, total_amostras, qtd_amostras, qtd_avaliadores, total_por_avaliador, notas_individuais))